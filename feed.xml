<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://ashishnandagawali.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ashishnandagawali.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-02T05:41:18+00:00</updated><id>https://ashishnandagawali.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Deepseek API Usage with Langchain</title><link href="https://ashishnandagawali.github.io/blog/2025/Deepseek-Langchain-api/" rel="alternate" type="text/html" title="Deepseek API Usage with Langchain"/><published>2025-02-01T20:00:00+00:00</published><updated>2025-02-01T20:00:00+00:00</updated><id>https://ashishnandagawali.github.io/blog/2025/Deepseek-Langchain-api</id><content type="html" xml:base="https://ashishnandagawali.github.io/blog/2025/Deepseek-Langchain-api/"><![CDATA[<h1 id="deepseek-api-usage-with-langchain">Deepseek API Usage with Langchain</h1> <p>In this article we’ll see how we can use the deepseek api from Lanchain framework as per documentation provided by Deepseek</p> <ol> <li>Install following library <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip3</span> <span class="n">install</span> <span class="n">langchain_openai</span>
</code></pre></div> </div> </li> <li>Import BaseChatOpenAI class from the Langchain chat models <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">langchain_openai.chat_models.base</span> <span class="kn">import</span> <span class="n">BaseChatOpenAI</span>
</code></pre></div> </div> </li> <li>Now create an BaseChatOpenAI object which will be used across our page.</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">llm</span> <span class="o">=</span> <span class="nc">BaseChatOpenAI</span><span class="p">(</span>
      <span class="n">model</span><span class="o">=</span><span class="sh">'</span><span class="s">deepseek-chat</span><span class="sh">'</span><span class="p">,</span> 
      <span class="n">openai_api_key</span><span class="o">=</span><span class="sh">'</span><span class="s">&lt;Your API Key&gt;</span><span class="sh">'</span>
      <span class="n">openai_api_base</span><span class="o">=</span><span class="sh">'</span><span class="s">https://api.deepseek.com</span><span class="sh">'</span><span class="p">,</span>
      <span class="n">max_tokens</span><span class="o">=</span><span class="mi">1024</span>
  <span class="p">)</span>
</code></pre></div></div> <ol> <li>lets give an sample prompt message to check whether the api is working fine. <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">Hi!</span><span class="sh">"</span><span class="p">)</span>
 <span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
</code></pre></div> </div> </li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">Hello</span><span class="err">!</span> <span class="n">How</span> <span class="n">can</span> <span class="n">I</span> <span class="n">assist</span> <span class="n">you</span> <span class="n">today</span><span class="err">?</span> 
</code></pre></div></div> <ol> <li>lets givea proper message and see the output to ensure that API is responding as expected</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
      <span class="p">(</span>
          <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">You are a helpful assistant that translates English to Persian. Translate the user sentence.</span><span class="sh">"</span><span class="p">,</span>
      <span class="p">),</span>
      <span class="p">(</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">I love programming.</span><span class="sh">"</span><span class="p">),</span>
  <span class="p">]</span>
  <span class="n">ai_msg</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="n">messages</span><span class="p">)</span>
  <span class="n">ai_msg</span><span class="p">.</span><span class="n">content</span>
</code></pre></div></div> <ol> <li>Check with complete message given to system ~~~python</li> </ol> <p>from langchain_core.prompts import ChatPromptTemplate</p> <p>prompt = ChatPromptTemplate( [ ( “system”, “You are a helpful assistant that translates {input_language} to {output_language}.”, ), (“human”, “{input}”), ] )</p> <p>chain = prompt | llm chain.invoke( { “input_language”: “English”, “output_language”: “German”, “input”: “I love agentic AI.”, } ) ~~~</p> <ol> <li> <p>Observe the output, esepcailly the KV Cache or content caching portion. <em>** AIMessage(content=’Ich liebe agentische KI.’, additional_kwargs={‘refusal’: None}, response_metadata={‘token_usage’: {‘completion_tokens’: 7, ‘prompt_tokens’: 20, ‘total_tokens’: 27, ‘completion_tokens_details’: None, ‘prompt_tokens_details’: {‘audio_tokens’: None, ‘cached_tokens’: 0}, ‘prompt_cache_hit_tokens’: 0, ‘prompt_cache_miss_tokens’: 20}, ‘model_name’: ‘deepseek-chat’, ‘system_fingerprint’: ‘fp_3a5770e1b4’, ‘finish_reason’: ‘stop’, ‘logprobs’: None}, id=’run-46ca6f2a-21ef-45f4-83f6-814c07fab391-0’, usage_metadata={‘input_tokens’: 20, ‘output_tokens’: 7, ‘total_tokens’: 27, ‘input_token_details’: {‘cache_read’: 0}, ‘output_token_details’: {}}) **</em></p> </li> <li> <p>You can find my <a href="https://github.com/ashishnandagawali/agentic-ai/blob/0096abadca77518e8af77fa36df0cc15a64d929e/Langchain_deepseek.ipynb">google colab file</a> in my github repo -</p> </li> </ol>]]></content><author><name></name></author><category term="Code"/><category term="Deepseek,"/><category term="API,"/><category term="Langchain"/><summary type="html"><![CDATA[This blog post describes way to connect Deepseep API using Langchain]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://ashishnandagawali.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://ashishnandagawali.github.io/blog/2024/tabs</id><content type="html" xml:base="https://ashishnandagawali.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="b1766bc8-8861-4e78-957b-d8a37720391e" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="b1766bc8-8861-4e78-957b-d8a37720391e" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="6433979e-ae69-48c8-b06d-8a2d1dbcf388" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="6433979e-ae69-48c8-b06d-8a2d1dbcf388" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="485b310a-d54d-46a2-ac10-dc0e615f7902" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="485b310a-d54d-46a2-ac10-dc0e615f7902" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://ashishnandagawali.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://ashishnandagawali.github.io/blog/2024/typograms</id><content type="html" xml:base="https://ashishnandagawali.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry></feed>